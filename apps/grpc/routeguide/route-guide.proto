syntax = "proto3";

option go_package = "github.com/gngsn/apps/grpc/route_guide/routeguide";

service RouteGuide {
    /*
        단순한 RPC

        Feat: point(위치) 받아서 Feature 반환
    */
    rpc GetFeature(Point) returns (Feature) {}

    /*
        Server-side Streaming RPC 
        Client가 Response 받고 끝내는 게 아니라, Stream을 받으면서 메세지가 더 없을 때까지 계속 구독
        - 한번에 큰 데이터를 리턴하게 되면 client는 데이터를 받기 까지 계속 blocking이 되어있어서 다른 작업들을 하지 못하게 됨
        
        Feat: Rectangle 내에서 사용할 수 있는 기능들 반환 - stream을 반환
    */
    rpc ListFeatures(Rectangle) returns (stream Feature) {}

    /*
        Client-side Streaming RPC 
        Client가 stream 메시지를 작성해서 서버에 요청하고 제공된 스트림을 다시 사용
        - 클라이언트는 메시지 작성을 완료한 후 서버가 메시지를 모두 읽고 응답을 반환할 때까지 기다림
        
        Feat: Point stream을 받아서 RouteSummary 반환
    */
    rpc RecordRoute(stream Point) returns (RouteSummary) {}

    /*
        Bidirectional Streaming RPC 
        - client와 server가 둘다 stream방식으로 서로 주고 받는 방식
        - 각 스트림의 메시지 순서가 유지
        - 2개의 stream은 각각 독립적 
        : server는 client가 stream으로 request를 다 보낼때까지 기다리고 나서 response를 주던지 request가 올 때마다 바로 response를 보낼 것인지 결정할 수 있음
        
        
        Feat: RouteNote stream을 받아서 RouteNote stream을 반환
    */
    rpc RouteChat(stream RouteNote) returns (stream RouteNote) {}
}




// message type 정의

/*
    Point : latitude(위도) & longitude(경도) (degree * 10^7 계산 후 반올림)
    
    latitude [-90, 90]
    longitude [-180, 180]
*/
message Point {
    int32 latitude = 1;
    int32 longitude = 2;
}


/*
    Rectangle : lo, hi

    각각 사각형의 모퉁이 좌표
*/
message Rectangle {
  Point lo = 1;
  Point hi = 2;
}


/*
    Feature : name, location

    location : Feature가 발견된 좌표
*/
message Feature {
    string name = 1;
    Point location = 2;
}


/*
    RouteNote : location, message

    location : message가 보내진 위치 좌표
    message : 전송받은 message
*/
message RouteNote {
  Point location = 1;
  string message = 2;
}

/*
    RouteSummary : location, message

    point_count : 전송받은 좌표 개수
    feature_count : route로 들어오는 동안 받은 알려진 특징 개수
    distance : 거리 (단위 - 미터)
    elapsed_time : 전송 시간
*/
message RouteSummary {
  int32 point_count = 1;
  int32 feature_count = 2;
  int32 distance = 3;
  int32 elapsed_time = 4;
}